"use strict";(self.webpackChunkdocusaurus_test=self.webpackChunkdocusaurus_test||[]).push([[475],{4162:function(e,t,o){o.r(t),o.d(t,{frontMatter:function(){return c},contentTitle:function(){return p},metadata:function(){return l},toc:function(){return i},default:function(){return u}});var n=o(7462),a=o(3366),r=(o(7294),o(3905)),s=["components"],c={sidebar_position:1},p="Utilizando Context API",l={unversionedId:"react/utilizando-context-api",id:"react/utilizando-context-api",isDocsHomePage:!1,title:"Utilizando Context API",description:"Compartilhando informa\xe7\xf5es globais dentro de um app.",source:"@site/docs/react/utilizando-context-api.md",sourceDirName:"react",slug:"/react/utilizando-context-api",permalink:"/docusaurus-test/docs/react/utilizando-context-api",editUrl:"https://github.com/facebook/docusaurus/edit/master/website/docs/react/utilizando-context-api.md",version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Tutorial Intro",permalink:"/docusaurus-test/docs/intro"}},i=[],m={toc:i};function u(e){var t=e.components,o=(0,a.Z)(e,s);return(0,r.kt)("wrapper",(0,n.Z)({},m,o,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"utilizando-context-api"},"Utilizando Context API"),(0,r.kt)("p",null,"Compartilhando informa\xe7\xf5es globais dentro de um app."),(0,r.kt)("p",null,"Vamos criar uma pasta na raiz chamada de ",(0,r.kt)("strong",{parentName:"p"},"context."),"\nEm seguida criamos o arquivo ",(0,r.kt)("strong",{parentName:"p"},"index.tsx")," e vamos importar o React e o hook ",(0,r.kt)("strong",{parentName:"p"},"createContext")," nele:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"import React, { createContext } from 'react'\n")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"\ud83d\udc46Tamb\xe9m adicionamos o hook de useState para usarmos mais tarde no exemplo.")),(0,r.kt)("p",null,"Agora vamos criar uma interface para o nosso ",(0,r.kt)("strong",{parentName:"p"},"provider")," onde apenas vamos passar a informa\xe7\xe3o que vamos receber os components filhos dele (no caso, de todo nosso app)",(0,r.kt)("strong",{parentName:"p"},".")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"interface IContextProvider {\n  children?: React.ReactNode\n}\n")),(0,r.kt)("p",null,"Criamos uma interface para o ",(0,r.kt)("strong",{parentName:"p"},"context,")," onde temos uma vari\xe1vel do tipo ",(0,r.kt)("em",{parentName:"p"},"boolean")," e uma fun\xe7\xe3o que ",(0,r.kt)("em",{parentName:"p"},"n\xe3o tem retorno"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"interface IContext {\n  foo: boolean\n  toggleAccess(): void\n}\n")),(0,r.kt)("p",null,"Vamos criar o nosso ",(0,r.kt)("strong",{parentName:"p"},"context")," e ",(0,r.kt)("strong",{parentName:"p"},"exportar")," ele:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"export const MyContext = createContext<IContext>(\n  {} as IContext\n)\n")),(0,r.kt)("p",null,"Por fim, exportamos nosso ",(0,r.kt)("strong",{parentName:"p"},"context provider")," com seus respectivos ",(0,r.kt)("strong",{parentName:"p"},"values"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"export const MyContextProvider = ({ children }: IContextProvider) => {\n  const [access, setAccess] = useState<boolean>(false)\n\n  const foo = false\n\n  function toggleAccess() {\n    setAccess(!access)\n  }\n\n  const values = {\n    foo,\n    toggleAccess\n  }\n\n  return (\n    <MyContext.Provider value={values}>\n      {children}\n    </MyContext.Provider>\n  )\n}\n")),(0,r.kt)("details",null,(0,r.kt)("summary",null,"C\xf3digo completo:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"import React, { createContext, useState } from 'react'\n\ninterface IContextProvider {\n  children?: React.ReactNode\n}\n\ninterface IContext {\n  foo: boolean\n  toggleAccess(): void\n}\n\nexport const MyContext = createContext<IContext>(\n  {} as IContext\n)\n\nexport const MyContextProvider = ({ children }: IContextProvider) => {\n  const [access, setAccess] = useState<boolean>(false)\n\n  const foo = false\n\n  function toggleAccess() {\n    setAccess(!access)\n  }\n\n  const values = {\n    foo,\n    toggleAccess\n  }\n\n  return (\n    <MyContext.Provider value={values}>\n      {children}\n    </MyContext.Provider>\n  )\n}\n"))),(0,r.kt)("p",null,"Voltando a raiz do projeto, no arquivo ",(0,r.kt)("strong",{parentName:"p"},"index.tsx,")," devemos importar nosso ",(0,r.kt)("strong",{parentName:"p"},"provider"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"import { MyContextProvider } from './context'\n")),(0,r.kt)("p",null,"Em seguida, no ",(0,r.kt)("strong",{parentName:"p"},"return")," do nosso app, vamos encapsular dentro do nosso ",(0,r.kt)("strong",{parentName:"p"},"provider")," todos os componentes filhos, que v\xe3o ter acesso aos ",(0,r.kt)("strong",{parentName:"p"},"values")," do nosso context:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"return (\n  <MyContextProvider>\n    <MyFirstComponent />\n    <MySecondComponent />\n  </MyContextProvider>\n)\n")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"\ud83d\udc46Dessa forma, ambos ",(0,r.kt)("em",{parentName:"p"},"MyFirstComponent")," e ",(0,r.kt)("em",{parentName:"p"},"MySecondComponent")," ter\xe3o acesso aos valores do context.")),(0,r.kt)("p",null,"Dentro do componente (no casso deste exemplo, o componente ",(0,r.kt)("em",{parentName:"p"},"MyFirstComponent"),") onde vamos acessar algum valor vindo do nosso context, precisamos importar junto com o React, o hook ",(0,r.kt)("strong",{parentName:"p"},"useContext"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"import React, { useContext } from 'react'\n")),(0,r.kt)("p",null,"Agora importamos nosso context:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"import { MyContext } from '../context'\n")),(0,r.kt)("p",null,"J\xe1 ",(0,r.kt)("em",{parentName:"p"},"dentro da fun\xe7\xe3o")," do componente, vamos chamar os values que precisamos acessar:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"const { foo } = useContext(MyContext)\n")),(0,r.kt)("p",null,"Agora basta chamar ",(0,r.kt)("strong",{parentName:"p"},"foo")," onde necess\xe1rio dentro do componente."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Pronto"),", agora voc\xea tem acesso aos dados compartilhados dentro da sua aplica\xe7\xe3o! \ud83d\ude80"))}u.isMDXComponent=!0}}]);